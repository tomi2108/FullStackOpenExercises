const mongoose = require("mongoose");
const Note = require("../models/Note");
const User = require("../models/User");
const helper = require("./test_helper");

const api = helper.api;

beforeEach(async () => {
  await User.deleteMany({});
  await helper.setRootUser();
  await Note.deleteMany({});
  await helper.setInitialNotes();
});

describe("notes", () => {
  describe("when there is initially some notes saved", () => {
    test("notes are returned as json", async () => {
      await api
        .get("/api/notes")
        .expect(200)
        .expect("Content-Type", /application\/json/);
    });

    test("all notes are returned", async () => {
      const response = await api.get("/api/notes");
      const notesAtStart = await helper.notesInDb();

      expect(response.body).toHaveLength(notesAtStart.length);
    });

    test("a specific note is within the returned notes", async () => {
      const response = await api.get("/api/notes");

      const contents = response.body.map((r) => r.content);

      expect(contents).toContain("initial_1");
    });
  });

  describe("viewing a specific note", () => {
    test("succeeds with a valid id", async () => {
      const notesAtStart = await helper.notesInDb();

      const noteToView = notesAtStart[0];
      const processedNoteToView = JSON.parse(JSON.stringify(noteToView));

      const result = await api
        .get(`/api/notes/${noteToView.id}`)
        .expect(200)
        .expect("Content-Type", /application\/json/);

      expect(result.body).toEqual(processedNoteToView);
    });

    test("fails with statuscode 404 if note does not exist", async () => {
      const validNonexistingId = await helper.nonExistingId();

      await api.get(`/api/notes/${validNonexistingId}`).expect(404);
    });

    test("fails with statuscode 400 id is invalid", async () => {
      const invalidId = "5a3d5da59070081a82a3445";

      await api.get(`/api/notes/${invalidId}`).expect(400);
    });
  });

  describe("addition of a new note", () => {
    test("succeeds with valid data", async () => {
      const rootUser = await helper.getRootUser();
      const notesAtStart = await helper.notesInDb();

      const loginUser = { username: "root", password: "secretPassword" };
      const login = await api.post("/api/login").send(loginUser);
      const token = login.body.token;

      const newNote = {
        content: "async/await simplifies making async calls",
        user: rootUser._id,
        important: true,
      };
      await api
        .post("/api/notes")
        .set({ Authorization: `bearer ${token}` })
        .send(newNote)
        .expect(201)
        .expect("Content-Type", /application\/json/);

      const notesAtEnd = await helper.notesInDb();
      expect(notesAtEnd).toHaveLength(notesAtStart.length + 1);

      const contents = notesAtEnd.map((n) => n.content);
      expect(contents).toContain("async/await simplifies making async calls");
    });

    test("fails with status code 400 if data invaild", async () => {
      const rootUser = await helper.getRootUser();
      const notesAtStart = await helper.notesInDb();

      const loginUser = { username: "root", password: "secretPassword" };
      const login = await api.post("/api/login").send(loginUser);
      const token = login.body.token;

      const newNote = {
        user: rootUser._id,
        important: true,
      };

      await api
        .post("/api/notes")
        .set({ Authorization: `bearer ${token}` })
        .send(newNote)
        .expect(400);

      const notesAtEnd = await helper.notesInDb();

      expect(notesAtEnd).toHaveLength(notesAtStart.length);
    });
  });

  describe("deletion of a note", () => {
    test("succeeds with status code 204 if id is valid", async () => {
      const notesAtStart = await helper.notesInDb();
      const noteToDelete = notesAtStart[0];

      await api.delete(`/api/notes/${noteToDelete.id}`).expect(204);

      const notesAtEnd = await helper.notesInDb();

      expect(notesAtEnd).toHaveLength(notesAtStart.length - 1);

      const contents = notesAtEnd.map((r) => r.content);

      expect(contents).not.toContain(noteToDelete.content);
    });
  });
});

describe("users", () => {
  describe("when there is initially one user in db", () => {
    test("creation succeeds with a fresh username", async () => {
      const usersAtStart = await helper.usersInDb();

      const newUser = {
        username: "mluukkai",
        name: "Matti Luukkainen",
        password: "salainen",
        notes: [],
      };

      await api
        .post("/api/users")
        .send(newUser)
        .expect(201)
        .expect("Content-Type", /application\/json/);

      const usersAtEnd = await helper.usersInDb();
      expect(usersAtEnd).toHaveLength(usersAtStart.length + 1);

      const usernames = usersAtEnd.map((u) => u.username);
      expect(usernames).toContain(newUser.username);
    });

    test("creation fails with proper statuscode and message if username already taken", async () => {
      const usersAtStart = await helper.usersInDb();

      const newUser = {
        username: "root",
        name: "Superuser",
        password: "salainen",
        notes: [],
      };

      const result = await api
        .post("/api/users")
        .send(newUser)
        .expect(400)
        .expect("Content-Type", /application\/json/);

      expect(result.body.error).toContain("username must be unique");

      const usersAtEnd = await helper.usersInDb();
      expect(usersAtEnd).toEqual(usersAtStart);
    });
  });
});

afterAll(() => {
  mongoose.connection.close();
});
